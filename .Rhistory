source("https://www.dropbox.com/s/mdx4777ugnluspz/webApplications.R?dl=1")
source("https://www.dropbox.com/s/mdx4777ugnluspz/webApplications.R?dl=1", encoding = "utf-8")
View(to_frameableHTML)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
source(file = "./R_function/clear_otherPackage.R")    # 相對路徑
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# source(file = "./R_function/clear_otherPackage.R")    # 相對路徑
# detach("package:stringr")    # 「收回」套件
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
readline("./sidebar_hDisplay.html")
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
readLines("sidebar_hDisplay.html")
readLines("sidebar_hDisplay.html")
readLines("sidebar_hDisplay.html", encoding = "UTF-8")
readLines("sidebar_hDisplay.html", encoding = "UTF-8")
readLines("sidebar_hDisplay.html", encoding = "UTF-8", skipNul = T)
readLines("sidebar_hDisplay.html", encoding = "UTF-8")
readLines("sidebar_hDisplay.html", encoding = "UTF-8")
readLines("sidebar_hDisplay.html", n=200, encoding = "UTF-8")
readLines("sidebar_hDisplay.html", n = 200L, encoding = "UTF-8")
readLines("sidebar_hDisplay.html", n = 10L, encoding = "UTF-8")
readLines("sidebar_hDisplay.html", n = 30L, encoding = "UTF-8")
readLines("sidebar_hDisplay.html", encoding = "UTF-8")
readLines("sidebar_hDisplay.html", warn = F, encoding = "UTF-8")
readLines("sidebar_hDisplay.html", warn = F, encoding = "UTF-8") -> htmlContent
str_detect(htmlContent, "pym.Child")
htmlContent
str(htmlContent)
all(str_detect(htmlContent, "pym.Child"))
all(!str_detect(htmlContent, "pym.Child"))
to_frameableHTML <- function(filename, regularHTML=F){
## regularHTML=T will treat plotly widget html as regular html
filename %>%
readLines() ->
htmlContent
if(all(!str_detect(htmlContent,"pym.Child"))){  # 沒有裝過pym 才要改裝
# find Plotly.newPlot(...)
ilocL <- str_which(htmlContent,'(Plotly\\.newPlot\\()')
if(length(ilocL)!=0 & regularHTML==F){ # 改變html文件為Plotly widget
ilocR <- str_which(htmlContent[ilocL:length(htmlContent)],'\\)')[[1]]+ilocL-1
targetLine <- htmlContent[ilocL:ilocR]
targetLineSerialized <- paste0(targetLine,collapse = '\n ')
paste0('function drawGraphic(width) {\n',
targetLineSerialized,'\n',
'}\n',
'var pymChild = new pym.Child({ renderCallback: drawGraphic });') -> newTargetLine
if(ilocR>ilocL){
htmlContent <- htmlContent[-((ilocL+1):ilocR)]
}
htmlContent[ilocL] <- newTargetLine
## find target id
targetLineSerialized %>%
str_replace_all(" ","") %>%
str_extract("(?<=(Plot\\())[:graph:]+(?=,)")
} else { # 改變html文件為一般html文件
iloc_headEnd <- str_which(htmlContent,"</head>")
paste0(
htmlContent[[iloc_headEnd-1]],
'\n',
'<script type="text/javascript" src="https://pym.nprapps.org/pym.v1.min.js"></script>'
) -> htmlContent[[iloc_headEnd-1]]
iloc_bodyEnd <- str_which(htmlContent,"</body>")
paste0(
htmlContent[[iloc_bodyEnd-1]],
'\n',
'<script> new pym.Child(); </script>'
) -> htmlContent[[iloc_bodyEnd-1]]
}
htmlContent %>% writeLines(filename)
}
'<div id="example" width="100%" height="100%"></div>
<script type="text/javascript" src="https://pym.nprapps.org/pym.v1.min.js"></script>
<script>
var pymParent = new pym.Parent("example", "filename", {});
</script>
' %>%
str_replace("filename",filename) %>%
cat('請在要引入圖形處貼上：\n\n',
.,'\n',
'請檢查scripts最後一行的路徑。\n',
'"example"可改成自己要的id')
}
to_frameableHTML("sidebar_hDisplay.html")
to_frameableHTML <- function(filename, regularHTML=F){
## regularHTML=T will treat plotly widget html as regular html
filename %>%
readLines(., warn = F, encoding = "UTF-8") ->
htmlContent
if(all(!str_detect(htmlContent,"pym.Child"))){  # 沒有裝過pym 才要改裝
# find Plotly.newPlot(...)
ilocL <- str_which(htmlContent,'(Plotly\\.newPlot\\()')
if(length(ilocL)!=0 & regularHTML==F){ # 改變html文件為Plotly widget
ilocR <- str_which(htmlContent[ilocL:length(htmlContent)],'\\)')[[1]]+ilocL-1
targetLine <- htmlContent[ilocL:ilocR]
targetLineSerialized <- paste0(targetLine,collapse = '\n ')
paste0('function drawGraphic(width) {\n',
targetLineSerialized,'\n',
'}\n',
'var pymChild = new pym.Child({ renderCallback: drawGraphic });') -> newTargetLine
if(ilocR>ilocL){
htmlContent <- htmlContent[-((ilocL+1):ilocR)]
}
htmlContent[ilocL] <- newTargetLine
## find target id
targetLineSerialized %>%
str_replace_all(" ","") %>%
str_extract("(?<=(Plot\\())[:graph:]+(?=,)")
} else { # 改變html文件為一般html文件
iloc_headEnd <- str_which(htmlContent,"</head>")
paste0(
htmlContent[[iloc_headEnd-1]],
'\n',
'<script type="text/javascript" src="https://pym.nprapps.org/pym.v1.min.js"></script>'
) -> htmlContent[[iloc_headEnd-1]]
iloc_bodyEnd <- str_which(htmlContent,"</body>")
paste0(
htmlContent[[iloc_bodyEnd-1]],
'\n',
'<script> new pym.Child(); </script>'
) -> htmlContent[[iloc_bodyEnd-1]]
}
htmlContent %>% writeLines(filename)
}
'<div id="example" width="100%" height="100%"></div>
<script type="text/javascript" src="https://pym.nprapps.org/pym.v1.min.js"></script>
<script>
var pymParent = new pym.Parent("example", "filename", {});
</script>
' %>%
str_replace("filename",filename) %>%
cat('請在要引入圖形處貼上：\n\n',
.,'\n',
'請檢查scripts最後一行的路徑。\n',
'"example"可改成自己要的id')
}
to_frameableHTML("sidebar_hDisplay.html")
to_frameableHTML <- function(filename, regularHTML=F){
## regularHTML=T will treat plotly widget html as regular html
filename %>%
readLines(., warn = F) ->
htmlContent
if(all(!str_detect(htmlContent,"pym.Child"))){  # 沒有裝過pym 才要改裝
# find Plotly.newPlot(...)
ilocL <- str_which(htmlContent,'(Plotly\\.newPlot\\()')
if(length(ilocL)!=0 & regularHTML==F){ # 改變html文件為Plotly widget
ilocR <- str_which(htmlContent[ilocL:length(htmlContent)],'\\)')[[1]]+ilocL-1
targetLine <- htmlContent[ilocL:ilocR]
targetLineSerialized <- paste0(targetLine,collapse = '\n ')
paste0('function drawGraphic(width) {\n',
targetLineSerialized,'\n',
'}\n',
'var pymChild = new pym.Child({ renderCallback: drawGraphic });') -> newTargetLine
if(ilocR>ilocL){
htmlContent <- htmlContent[-((ilocL+1):ilocR)]
}
htmlContent[ilocL] <- newTargetLine
## find target id
targetLineSerialized %>%
str_replace_all(" ","") %>%
str_extract("(?<=(Plot\\())[:graph:]+(?=,)")
} else { # 改變html文件為一般html文件
iloc_headEnd <- str_which(htmlContent,"</head>")
paste0(
htmlContent[[iloc_headEnd-1]],
'\n',
'<script type="text/javascript" src="https://pym.nprapps.org/pym.v1.min.js"></script>'
) -> htmlContent[[iloc_headEnd-1]]
iloc_bodyEnd <- str_which(htmlContent,"</body>")
paste0(
htmlContent[[iloc_bodyEnd-1]],
'\n',
'<script> new pym.Child(); </script>'
) -> htmlContent[[iloc_bodyEnd-1]]
}
htmlContent %>% writeLines(filename)
}
'<div id="example" width="100%" height="100%"></div>
<script type="text/javascript" src="https://pym.nprapps.org/pym.v1.min.js"></script>
<script>
var pymParent = new pym.Parent("example", "filename", {});
</script>
' %>%
str_replace("filename",filename) %>%
cat('請在要引入圖形處貼上：\n\n',
.,'\n',
'請檢查scripts最後一行的路徑。\n',
'"example"可改成自己要的id')
}
to_frameableHTML <- function(filename, regularHTML=F){
## regularHTML=T will treat plotly widget html as regular html
filename %>%
readLines(., warn = F) ->
htmlContent
if(all(!str_detect(htmlContent,"pym.Child"))){  # 沒有裝過pym 才要改裝
# find Plotly.newPlot(...)
ilocL <- str_which(htmlContent,'(Plotly\\.newPlot\\()')
if(length(ilocL)!=0 & regularHTML==F){ # 改變html文件為Plotly widget
ilocR <- str_which(htmlContent[ilocL:length(htmlContent)],'\\)')[[1]]+ilocL-1
targetLine <- htmlContent[ilocL:ilocR]
targetLineSerialized <- paste0(targetLine,collapse = '\n ')
paste0('function drawGraphic(width) {\n',
targetLineSerialized,'\n',
'}\n',
'var pymChild = new pym.Child({ renderCallback: drawGraphic });') -> newTargetLine
if(ilocR>ilocL){
htmlContent <- htmlContent[-((ilocL+1):ilocR)]
}
htmlContent[ilocL] <- newTargetLine
## find target id
targetLineSerialized %>%
str_replace_all(" ","") %>%
str_extract("(?<=(Plot\\())[:graph:]+(?=,)")
} else { # 改變html文件為一般html文件
iloc_headEnd <- str_which(htmlContent,"</head>")
paste0(
htmlContent[[iloc_headEnd-1]],
'\n',
'<script type="text/javascript" src="https://pym.nprapps.org/pym.v1.min.js"></script>'
) -> htmlContent[[iloc_headEnd-1]]
iloc_bodyEnd <- str_which(htmlContent,"</body>")
paste0(
htmlContent[[iloc_bodyEnd-1]],
'\n',
'<script> new pym.Child(); </script>'
) -> htmlContent[[iloc_bodyEnd-1]]
}
htmlContent %>% writeLines(filename)
}
'<div id="example" width="100%" height="100%"></div>
<script type="text/javascript" src="https://pym.nprapps.org/pym.v1.min.js"></script>
<script>
var pymParent = new pym.Parent("example", "filename", {});
</script>
' %>%
str_replace("filename",filename) %>%
cat('請在要引入圖形處貼上：\n\n',
.,'\n',
'請檢查scripts最後一行的路徑。\n',
'"example"可改成自己要的id')
}
to_frameableHTML("sidebar_hDisplay.html")
source(file = "./R_function_dd/to_frameableHTML_byMartin")
source(file = "./R_function_dd/to_frameableHTML_byMartin.R")
source(file = "./R_function_dd/to_frameableHTML_byMartin.R", encoding = "UTF-8")
View(to_frameableHTML)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
source(file = "./R_function_dd/to_frameableHTML_byMartin.R", encoding = "UTF-8")
# detach("package:stringr")    # 「收回」套件
to_frameableHTML("sidebar_hDisplay")
to_frameableHTML("sidebar_hDisplay.html")
to_frameableHTML("sidebar_hDisplay")
to_frameableHTML("sidebar_hDisplay.html")
library(flexdashboard)
load(file = "./rda_plot/h1Plot.Rda")
load(file = "./rda_plot/h2Plot.Rda")
load(file = "./rda_plot/h3Plot.Rda")
h1Plot
library(flexdashboard)
load(file = "./rda_plot/h1Plot.Rda")
load(file = "./rda_plot/h2Plot.Rda")
load(file = "./rda_plot/h3Plot.Rda")
library(dplyr); library(stringr); library(ggplot2); library(plotly); library(lubridate); library(readr); library(colorspace); library(grDevices); library(shiny); library(shinyjs); library(scales)
library(tidyr); library(showtext); library(tidyverse); library(colorspace)
library(flexdashboard)
load(file = "./rda_plot/h1Plot.Rda")
load(file = "./rda_plot/h2Plot.Rda")
load(file = "./rda_plot/h3Plot.Rda")
library(dplyr); library(stringr); library(ggplot2); library(plotly); library(lubridate); library(readr); library(colorspace); library(grDevices); library(shiny); library(shinyjs); library(scales)
library(tidyr); library(showtext); library(tidyverse); library(colorspace)
h1Plot
h2Plot
h3Plot
h1Plot
library(flexdashboard)
servr::daemon_stop(
which=servr::daemon_list()
)
servr::httd(dir=".",port=8000,initpath=params$output_filename)
servr::daemon_stop(
which=servr::daemon_list()
)
servr::httd(dir=".",port=8000,initpath=params$output_filename)
servr::daemon_stop(
which=servr::daemon_list()
)
servr::httd(dir=".",port=8000,initpath=params$output_filename)
servr::daemon_stop(
which=servr::daemon_list()
)
servr::httd(dir=".",port=8000,initpath=params$output_filename)
servr::daemon_stop(4)
library(flexdashboard)
servr::daemon_stop(
which=servr::daemon_list()
)
servr::httd(dir=".",port=8000,initpath=params$output_filename)
servr::daemon_stop(1)
